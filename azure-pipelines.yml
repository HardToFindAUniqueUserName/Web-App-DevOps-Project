# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- none  # switch to main for submission

pool:
  vmImage: ubuntu-latest
  parallel: 1

steps:
- task: Docker@2
  inputs:
    containerRegistry: 'DevOpsEng-DockerHub'
    repository: 'paulmayer2731 / web-app-devops-project'
    command: 'buildAndPush'
    Dockerfile: '**/Dockerfile'
    tags: 'latest'

- task: KubernetesManifest@1
  inputs:
    action: 'deploy'
    connectionType: 'azureResourceManager'
    azureSubscriptionConnection: 'Paul Mayer DevOps(3542213f-7e7a-4dad-aea4-fe30482ed0f3)'
    azureResourceGroup: 'networking-resource-group'
    kubernetesCluster: 'terraform-aks-cluster'
    namespace: 'default'
    manifests: 'application-manifest.yaml'

- task: Kubernetes@1
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'terraform-aks-cluster-sp'
    namespace: 'default'
    command: 'get'
    arguments: 'svc flask-app-service -n default -o jsonpath="{.status.loadBalancer.ingress[*].ip}"'
    secretType: 'dockerRegistry'
    containerRegistryType: 'Azure Container Registry' 

- task: Kubernetes@1
  displayName: 'Kubernetes Login'
  inputs:
    connectionType: 'Kubernetes Service Connection'
    kubernetesServiceEndpoint: 'terraform-aks-cluster-sp'
    command:  login
- script: |
    kubectl describe services flask-app-service | grep 'LoadBalancer Ingress'
  displayName: LoadBalancer Ingress IP